!function(e){function t(t){for(var n,r,i=t[0],l=t[1],c=t[2],d=0,j=[];d<i.length;d++)r=i[d],Object.prototype.hasOwnProperty.call(a,r)&&a[r]&&j.push(a[r][0]),a[r]=0;for(n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n]);for(u&&u(t);j.length;)j.shift()();return o.push.apply(o,c||[]),s()}function s(){for(var e,t=0;t<o.length;t++){for(var s=o[t],n=!0,i=1;i<s.length;i++){var l=s[i];0!==a[l]&&(n=!1)}n&&(o.splice(t--,1),e=r(r.s=s[0]))}return e}var n={},a={0:0},o=[];function r(t){if(n[t])return n[t].exports;var s=n[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=n,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(s,n,function(t){return e[t]}.bind(null,n));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="";var i=window.webpackJsonp=window.webpackJsonp||[],l=i.push.bind(i);i.push=t,i=i.slice();for(var c=0;c<i.length;c++)t(i[c]);var u=l;o.push([186,1]),s()}({13:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=s(1).createContext(void 0);t.default=n},14:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.maxWidth700=void 0;const n=s(2);t.maxWidth700=n.css`
  @media (min-width: 700px) {
    max-width: 700px;
    margin: 0 auto;
  }
`},181:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=s(2),a=n.css`
  max-width: 100%;
  width: 100%;
  background-color: #fff;
  border-color: #dbdbdb;
  border: 1px solid transparent;
  display: inline-flex;
  font-size: 1.125rem;
  height: 40px;
  padding-left: calc(0.75em - 1px);
  padding-right: calc(0.75em - 1px);
  &:focus {
    outline: none;
  }
`;t.default=function(e){return n.jsx("input",Object.assign({type:"text",css:a},e))}},186:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=s(1),a=s(188),o=s(28),r=s(222);o.default.connect("http://192.168.1.120:3000"),a.render(n.createElement(r.default,null),document.getElementById("root"))},219:function(e,t){},222:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=s(1),a=s(15),o=s(2),r=s(182),i=s(227),l=s(13),c=s(29),u=s(229),d=n.lazy(()=>Promise.resolve().then(()=>s(230))),j=n.lazy(()=>Promise.resolve().then(()=>s(236))),f=n.lazy(()=>Promise.resolve().then(()=>s(238))),g=o.css`
  html,
  body,
  #root {
    height: 100%;
  }

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  body {
    font-family: Circular, Arial, sans-serif;
    font-size: 18px;
    color: var(--font-color);
    background-color: var(--tertiary-color);
    padding: 0;
    margin: 0;
  }
`,p=o.css`
  :root {
    --primary-color: #009688;
    --secondary-color: #58cdbd;
    --tertiary-color: #c3fcf2;
    --counter-color: #f97dea;
    --font-color: black;
  }
`,h=o.css`
  :root {
    --primary-color: #242f2e;
    --tertiary-color: #515d5c;
    --secondary-color: #566877;
    --counter-color: #ff70c2;
    --font-color: white;
  }
`,m=a.default.div`
  min-height: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
`;t.default=function(){const[e,t]=n.useReducer(i.default,i.initialState);return o.jsx(l.default.Provider,{value:{globalState:e,dispatch:t}},o.jsx(l.default.Consumer,null,e=>(c.default(e.dispatch,e.globalState),null)),o.jsx(u.default,null,o.jsx(n.Suspense,{fallback:o.jsx("div",null,"Loading...")},o.jsx(o.Global,{styles:g}),o.jsx(o.Global,{styles:"light"===e.settings.theme?p:h}),o.jsx(r.BrowserRouter,null,o.jsx(m,null,o.jsx(f,null),o.jsx(r.Switch,null,o.jsx(r.Route,{exact:!0,path:"/settings"},o.jsx(j,null)),o.jsx(r.Route,{path:"/"},o.jsx(d,null))))))))}},227:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initialState=void 0;const n=s(7),a=s(228),o=s(46);t.initialState={route:"/",user:a.default.load(),settings:o.default.load(),chatView:{message:"",messages:[]},navigation:{unreadMessages:0}},t.default=function(e,t){switch(t.type){case n.SET_ROUTE:return Object.assign(Object.assign({},e),{route:t.payload});case n.SETTINGS_RESET:return Object.assign(Object.assign({},e),{settings:o.default.getDefaultValues()});case n.SET_SETTINGS_HOURFORMAT:return Object.assign(Object.assign({},e),{settings:Object.assign(Object.assign({},e.settings),{hourFormat:t.payload})});case n.SET_SETTINGS_LANGUAGE:return Object.assign(Object.assign({},e),{settings:Object.assign(Object.assign({},e.settings),{language:t.payload})});case n.SET_SETTINGS_USERNAME:return Object.assign(Object.assign({},e),{user:Object.assign(Object.assign({},e.user),{username:t.payload})});case n.SET_SETTINGS_THEME:return Object.assign(Object.assign({},e),{settings:Object.assign(Object.assign({},e.settings),{theme:t.payload})});case n.SET_SETTINGS_SENDTYPE:return Object.assign(Object.assign({},e),{settings:Object.assign(Object.assign({},e.settings),{sendType:t.payload})});case n.SET_CHAT_MESSAGE:return Object.assign(Object.assign({},e),{chatView:Object.assign(Object.assign({},e.chatView),{message:t.payload})});case n.ADD_CHAT_MESSAGE:return Object.assign(Object.assign({},e),{chatView:{messages:[...e.chatView.messages,t.payload],message:""}});case n.RECEIVE_CHAT_MESSAGE:return e;case n.ADD_UNREAD_MESSAGE:return Object.assign(Object.assign({},e),{navigation:Object.assign(Object.assign({},e.navigation),{unreadMessages:e.navigation.unreadMessages+1})});case n.CLEAR_UNREAD_MESSAGES:return Object.assign(Object.assign({},e),{navigation:Object.assign(Object.assign({},e.navigation),{unreadMessages:0})});default:return e}}},228:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=s(45);class a{static load(){const e=n.load("user");if(e)return e;const t={id:a.generateGUID(),username:a.generateRandomUsername()};return a.save(t),t}static save(e){n.store("user",e)}static generateGUID(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))}static generateRandomUsername(){return"user"+new String(Math.floor(9999*Math.random())+1).padStart(4,"0")}}t.default=a},229:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=s(2),a=s(1);class o extends a.Component{constructor(e){super(e),this.state={hasError:!1}}static getDerivedStateFromError(e){return{hasError:!0}}componentDidCatch(e,t){}render(){return this.state.hasError?n.jsx("h1",null,"Something went wrong."):this.props.children}}t.default=o},230:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=s(1),a=s(2),o=s(7),r=s(13),i=s(28),l=s(47),c=s(231),u=s(181),d=s(235),j=s(14),f=a.css`
  overflow-y: auto;
  flex: 1;
`,g=a.css`
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  ${j.maxWidth700}

  input {
    width: 100%;
    margin-right: 1rem;
  }
`,p=a.css`
  width: 25px;
  height: 25px;
`;t.default=function(){const{globalState:{user:e,settings:t,chatView:s},dispatch:j}=n.useContext(r.default);function h(){if(!s.message)return;const t=(new Date).getTime(),n={id:e.id+t,user:Object.assign({},e),timestamp:t,text:s.message};j({type:o.ADD_CHAT_MESSAGE,payload:n}),i.default.sendMessage(n)}return a.jsx(n.Fragment,null,a.jsx("div",{css:f},a.jsx(c.default,{messages:s.messages,userId:e.id,hourFormat:t.hourFormat})),a.jsx("div",{css:g},a.jsx(u.default,{name:"message",placeholder:"Enter message",value:s.message,onKeyDown:function(e){t.sendType&&e.ctrlKey&&13===e.keyCode&&h()},onChange:function(e){const t=e.currentTarget.value;j({type:o.SET_CHAT_MESSAGE,payload:t})}}),a.jsx(l.default,{onClick:h,noPadding:!0,"data-testid":"send-button"},a.jsx("img",{src:d.default,css:p}))))}},231:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=s(2),a=s(14),o=s(232),r=n.css`
  padding: 1rem;
  ${a.maxWidth700}
`;t.default=function({messages:e,userId:t,hourFormat:s}){return n.jsx("div",{css:r},e.length?e.map(e=>n.jsx(o.default,{key:e.id,message:e,isOwnedByUser:e.user.id===t,hourFormat:s})):n.jsx("div",null,n.jsx("i",null,"No messages yet")))}},232:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=s(0),a=s(2),o=s(15),r=o.default.div`
  display: flex;
  flex-direction: column;
  align-items: ${e=>e.isOwnedByUser?"flex-end":"flex-start"};

  > div {
    padding: 10px;
  }
`,i=o.default.div`
  position: relative;
  background-color: white;
  color: black;
  border-radius: 20px;
  min-width: 40px;
  width: fit-content;

  &::after {
    content: '';
    position: absolute;
    top: -4px;
    ${e=>e.isOwnedByUser?"right":"left"}: 15px;
    width: 10px;
    height: 10px;
    background-color: white;
    transform: rotate(45deg);
  }
`;t.default=function({message:e,isOwnedByUser:t,hourFormat:s}){return a.jsx(r,{isOwnedByUser:t},a.jsx("div",null,!t&&e.user.username+", ",n.utc(e.timestamp).format("24"===s?"HH:mm":"hh:mm a")),a.jsx(i,{isOwnedByUser:t},e.text))}},234:function(e,t,s){var n={"./af":48,"./af.js":48,"./ar":49,"./ar-dz":50,"./ar-dz.js":50,"./ar-kw":51,"./ar-kw.js":51,"./ar-ly":52,"./ar-ly.js":52,"./ar-ma":53,"./ar-ma.js":53,"./ar-sa":54,"./ar-sa.js":54,"./ar-tn":55,"./ar-tn.js":55,"./ar.js":49,"./az":56,"./az.js":56,"./be":57,"./be.js":57,"./bg":58,"./bg.js":58,"./bm":59,"./bm.js":59,"./bn":60,"./bn.js":60,"./bo":61,"./bo.js":61,"./br":62,"./br.js":62,"./bs":63,"./bs.js":63,"./ca":64,"./ca.js":64,"./cs":65,"./cs.js":65,"./cv":66,"./cv.js":66,"./cy":67,"./cy.js":67,"./da":68,"./da.js":68,"./de":69,"./de-at":70,"./de-at.js":70,"./de-ch":71,"./de-ch.js":71,"./de.js":69,"./dv":72,"./dv.js":72,"./el":73,"./el.js":73,"./en-au":74,"./en-au.js":74,"./en-ca":75,"./en-ca.js":75,"./en-gb":76,"./en-gb.js":76,"./en-ie":77,"./en-ie.js":77,"./en-il":78,"./en-il.js":78,"./en-in":79,"./en-in.js":79,"./en-nz":80,"./en-nz.js":80,"./en-sg":81,"./en-sg.js":81,"./eo":82,"./eo.js":82,"./es":83,"./es-do":84,"./es-do.js":84,"./es-us":85,"./es-us.js":85,"./es.js":83,"./et":86,"./et.js":86,"./eu":87,"./eu.js":87,"./fa":88,"./fa.js":88,"./fi":89,"./fi.js":89,"./fil":90,"./fil.js":90,"./fo":91,"./fo.js":91,"./fr":92,"./fr-ca":93,"./fr-ca.js":93,"./fr-ch":94,"./fr-ch.js":94,"./fr.js":92,"./fy":95,"./fy.js":95,"./ga":96,"./ga.js":96,"./gd":97,"./gd.js":97,"./gl":98,"./gl.js":98,"./gom-deva":99,"./gom-deva.js":99,"./gom-latn":100,"./gom-latn.js":100,"./gu":101,"./gu.js":101,"./he":102,"./he.js":102,"./hi":103,"./hi.js":103,"./hr":104,"./hr.js":104,"./hu":105,"./hu.js":105,"./hy-am":106,"./hy-am.js":106,"./id":107,"./id.js":107,"./is":108,"./is.js":108,"./it":109,"./it-ch":110,"./it-ch.js":110,"./it.js":109,"./ja":111,"./ja.js":111,"./jv":112,"./jv.js":112,"./ka":113,"./ka.js":113,"./kk":114,"./kk.js":114,"./km":115,"./km.js":115,"./kn":116,"./kn.js":116,"./ko":117,"./ko.js":117,"./ku":118,"./ku.js":118,"./ky":119,"./ky.js":119,"./lb":120,"./lb.js":120,"./lo":121,"./lo.js":121,"./lt":122,"./lt.js":122,"./lv":123,"./lv.js":123,"./me":124,"./me.js":124,"./mi":125,"./mi.js":125,"./mk":126,"./mk.js":126,"./ml":127,"./ml.js":127,"./mn":128,"./mn.js":128,"./mr":129,"./mr.js":129,"./ms":130,"./ms-my":131,"./ms-my.js":131,"./ms.js":130,"./mt":132,"./mt.js":132,"./my":133,"./my.js":133,"./nb":134,"./nb.js":134,"./ne":135,"./ne.js":135,"./nl":136,"./nl-be":137,"./nl-be.js":137,"./nl.js":136,"./nn":138,"./nn.js":138,"./oc-lnc":139,"./oc-lnc.js":139,"./pa-in":140,"./pa-in.js":140,"./pl":141,"./pl.js":141,"./pt":142,"./pt-br":143,"./pt-br.js":143,"./pt.js":142,"./ro":144,"./ro.js":144,"./ru":145,"./ru.js":145,"./sd":146,"./sd.js":146,"./se":147,"./se.js":147,"./si":148,"./si.js":148,"./sk":149,"./sk.js":149,"./sl":150,"./sl.js":150,"./sq":151,"./sq.js":151,"./sr":152,"./sr-cyrl":153,"./sr-cyrl.js":153,"./sr.js":152,"./ss":154,"./ss.js":154,"./sv":155,"./sv.js":155,"./sw":156,"./sw.js":156,"./ta":157,"./ta.js":157,"./te":158,"./te.js":158,"./tet":159,"./tet.js":159,"./tg":160,"./tg.js":160,"./th":161,"./th.js":161,"./tk":162,"./tk.js":162,"./tl-ph":163,"./tl-ph.js":163,"./tlh":164,"./tlh.js":164,"./tr":165,"./tr.js":165,"./tzl":166,"./tzl.js":166,"./tzm":167,"./tzm-latn":168,"./tzm-latn.js":168,"./tzm.js":167,"./ug-cn":169,"./ug-cn.js":169,"./uk":170,"./uk.js":170,"./ur":171,"./ur.js":171,"./uz":172,"./uz-latn":173,"./uz-latn.js":173,"./uz.js":172,"./vi":174,"./vi.js":174,"./x-pseudo":175,"./x-pseudo.js":175,"./yo":176,"./yo.js":176,"./zh-cn":177,"./zh-cn.js":177,"./zh-hk":178,"./zh-hk.js":178,"./zh-mo":179,"./zh-mo.js":179,"./zh-tw":180,"./zh-tw.js":180};function a(e){var t=o(e);return s(t)}function o(e){if(!s.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}a.keys=function(){return Object.keys(n)},a.resolve=o,e.exports=a,a.id=234},235:function(e,t,s){"use strict";s.r(t),t.default=s.p+"592cffbd6aa6dd58511e5d8154f24008.svg"},236:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=s(1),a=s(2),o=s(14),r=s(7),i=s(13),l=s(47),c=s(237),u=s(181),d=s(46),j=a.css`
  overflow-y: auto;
  flex: 1;
`,f=a.css`
  padding: 1rem;
  ${o.maxWidth700}
`,g=a.css`
  margin-bottom: 2rem;
  display: flex;
  flex-direction: column;

  label {
    margin-bottom: 0.75rem;
    font-size: 1.125rem;
  }
`,p=a.css`
  padding: 1rem;
  display: flex;
  width: 100%;
  ${o.maxWidth700}
`,h=[{value:"en",label:"English"},{value:"es",label:"Spanish"}];t.default=function(){const{globalState:{user:e,settings:t},dispatch:s}=n.useContext(i.default);function o(e){const t=e.target.value;s({type:r.SET_SETTINGS_HOURFORMAT,payload:t}),d.default.save({[e.target.name]:t})}function m(e){const t=e.target.value;s({type:r.SET_SETTINGS_THEME,payload:t}),d.default.save({[e.target.name]:t})}function E(e){const t="on"===e.target.value;s({type:r.SET_SETTINGS_SENDTYPE,payload:t}),d.default.save({[e.target.name]:t})}return a.jsx(n.Fragment,null,a.jsx("div",{css:j},a.jsx("div",{css:f},a.jsx("div",{css:g},a.jsx("label",{htmlFor:"username"},"User name"),a.jsx(u.default,{name:"username",value:e.username,onChange:function(e){const t=e.target.value.replace(/[\W_]+/g,"");s({type:r.SET_SETTINGS_USERNAME,payload:t}),d.default.save({[e.target.name]:t})}})),a.jsx("div",{css:g},a.jsx("label",{htmlFor:"theme"},"Interface color"),a.jsx("div",null,a.jsx("input",{type:"radio",name:"theme",value:"light",checked:"light"===t.theme,onChange:m})," ","Light",a.jsx("input",{type:"radio",name:"theme",value:"dark",checked:"dark"===t.theme,onChange:m})," ","Dark")),a.jsx("div",{css:g},a.jsx("label",{htmlFor:"hourFormat"},"Clock display"),a.jsx("div",null,a.jsx("input",{type:"radio",name:"hourFormat",value:"12",checked:"12"===t.hourFormat,onChange:o})," ","12 Hours",a.jsx("input",{type:"radio",name:"hourFormat",value:"24",checked:"24"===t.hourFormat,onChange:o})," ","24 Hours")),a.jsx("div",{css:g},a.jsx("label",{htmlFor:"sendType"},"Send messages on CTRL+ENTER"),a.jsx("div",null,a.jsx("input",{type:"radio",name:"sendType",value:"on",checked:t.sendType,onChange:E})," ","On",a.jsx("input",{type:"radio",name:"sendType",value:"off",checked:!t.sendType,onChange:E})," ","Off")),a.jsx("div",{css:g},a.jsx("label",{htmlFor:"language"},"Language"),a.jsx(c.default,{name:"language",options:h,value:t.language,onChange:function(e){const t=e.target.value;s({type:r.SET_SETTINGS_LANGUAGE,payload:t}),d.default.save({[e.target.name]:t})}})))),a.jsx("div",{css:p},a.jsx(l.default,{fullWidth:!0,onClick:function(){s({type:r.SETTINGS_RESET}),d.default.reset()}},"Reset to defaults")))}},237:function(e,t,s){"use strict";var n=this&&this.__rest||function(e,t){var s={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(s[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(n=Object.getOwnPropertySymbols(e);a<n.length;a++)t.indexOf(n[a])<0&&Object.prototype.propertyIsEnumerable.call(e,n[a])&&(s[n[a]]=e[n[a]])}return s};Object.defineProperty(t,"__esModule",{value:!0});const a=s(2),o=a.css`
  font-size: 1em;
`;t.default=function(e){var{options:t,value:s}=e,r=n(e,["options","value"]);return a.jsx("select",Object.assign({css:o},r,{value:s}),t.map(e=>a.jsx("option",{value:e.value,key:e.value},e.label)))}},238:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=s(1),a=s(2),o=s(15),r=s(182),i=s(7),l=s(13),c=s(14),u=a.css`
  background-color: var(--primary-color);
  width: 100%;
  display: flex;

  > a {
    text-decoration: none;
    color: var(--tertiary-color);
    padding: 1rem 1.125rem;
    :hover {
      color: white;
    }
  }
  a + a {
    margin-left: 1rem;
  }

  :after {
    content: '';
    background-color: var(--primary-color);
    position: absolute;
    width: 100%;
    height: 53px;
    left: 0;
    z-index: -1;
  }
  ${c.maxWidth700}
`,d=o.default(r.NavLink)`
  position: relative;

  @keyframes blink {
    50% {
      opacity: 0;
    }
  }

  ${e=>e.badge>0&&`\n    animation: blink 2s linear infinite;\n    &::after {\n      content: '${e.badge}';\n      position: absolute;\n      top: 5px;\n      right: 5px;\n      width: 15px;\n      height: 15px;\n      border-radius: 25px;\n      padding: 1px 4px;\n      font-size: 12px;\n      color: white;\n      background-color: red;\n    }\n  `}
`,j={color:"white"};t.default=function(){const{dispatch:e,globalState:{navigation:t}}=n.useContext(l.default);let s=r.useLocation();return n.useEffect(()=>{e({type:i.SET_ROUTE,payload:s}),"/"===s.pathname&&e({type:i.CLEAR_UNREAD_MESSAGES})},[s]),a.jsx("nav",{css:u},a.jsx(d,{exact:!0,to:"/",activeStyle:j,badge:Math.min(t.unreadMessages,9)},"Chat"),a.jsx(d,{exact:!0,to:"/settings",activeStyle:j},"Settings"))}},28:function(e,t,s){"use strict";var n=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(a,o){function r(e){try{l(n.next(e))}catch(e){o(e)}}function i(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(r,i)}l((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const a=s(7),o=s(29);t.default=new class{connect(e){return n(this,void 0,void 0,(function*(){const t=(yield Promise.resolve().then(()=>s(192)))(e);t.on("connect",this.onConnect),t.on("CHAT",this.onChatEvent),t.on("disconnect",this.onDisconnect),this.socket=t,this.url=e}))}onConnect(){console.debug("Stablished chat websocket to ",this.url)}onChatEvent(e){const{dispatch:t,globalState:{user:s,route:n}}=o.getContext();s.id!==e.user.id&&(t({type:a.ADD_CHAT_MESSAGE,payload:e}),"/"!==n&&t({type:a.ADD_UNREAD_MESSAGE}))}sendMessage(e){this.socket.emit("CHAT",e)}onDisconnect(){console.debug("Disconnected chat websocket")}}},29:function(e,t,s){"use strict";let n,a;Object.defineProperty(t,"__esModule",{value:!0}),t.getContext=void 0,t.default=function(e,t){n=e,a=t},t.getContext=function(){return{dispatch:n,globalState:a}}},45:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.remove=t.load=t.store=void 0,t.store=function(e,t){const s=JSON.parse(window.localStorage.getItem(e)||"{}");window.localStorage.setItem(e,JSON.stringify(Object.assign(Object.assign({},s),t)))},t.load=function(e){const t=window.localStorage.getItem(e);return JSON.parse(t)},t.remove=function(e){window.localStorage.removeItem(e)}},46:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=s(45);class a{static load(){return Object.assign(Object.assign({},a.getDefaultValues()),n.load("settings"))}static save(e){n.store("settings",e)}static reset(){a.save(a.getDefaultValues())}static getDefaultValues(){return{theme:"light",hourFormat:"12",sendType:!1,language:"en"}}}t.default=a},47:function(e,t,s){"use strict";var n=this&&this.__rest||function(e,t){var s={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(s[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(n=Object.getOwnPropertySymbols(e);a<n.length;a++)t.indexOf(n[a])<0&&Object.prototype.propertyIsEnumerable.call(e,n[a])&&(s[n[a]]=e[n[a]])}return s};Object.defineProperty(t,"__esModule",{value:!0});const a=s(2),o=s(15).default.a`
  display: inline-block;
  text-align: center;

  min-width: 70px;
  height: 40px;
  padding: 6px 8px;

  background-color: var(--primary-color);
  border-color: transparent;
  color: #fff;
  cursor: pointer;

  ${e=>e.fullWidth&&"width: 100%;"}
  ${e=>!e.noPadding&&"\n    padding: 0.5rem 1.125rem;\n    font-size: 1.125rem;\n  "}

  &:focus {
    outline: none;
  }
  &:active {
    background-color: var(--secondary-color);
  }
`;t.default=function(e){var{fullWidth:t,children:s}=e,r=n(e,["fullWidth","children"]);return a.jsx(o,Object.assign({fullWidth:t},r),s)}},7:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CLEAR_UNREAD_MESSAGES=t.ADD_UNREAD_MESSAGE=t.RECEIVE_CHAT_MESSAGE=t.ADD_CHAT_MESSAGE=t.SET_CHAT_MESSAGE=t.SET_SETTINGS_SENDTYPE=t.SET_SETTINGS_THEME=t.SET_SETTINGS_USERNAME=t.SET_SETTINGS_LANGUAGE=t.SET_SETTINGS_HOURFORMAT=t.SETTINGS_RESET=t.SET_ROUTE=void 0,t.SET_ROUTE="SET_ROUTE",t.SETTINGS_RESET="SETTINGS_RESET",t.SET_SETTINGS_HOURFORMAT="SET_SETTINGS_HOURFORMAT",t.SET_SETTINGS_LANGUAGE="SET_SETTINGS_LANGUAGE",t.SET_SETTINGS_USERNAME="SET_SETTINGS_USERNAME",t.SET_SETTINGS_THEME="SET_SETTINGS_THEME",t.SET_SETTINGS_SENDTYPE="SET_SETTINGS_SENDTYPE",t.SET_CHAT_MESSAGE="SET_CHAT_MESSAGE",t.ADD_CHAT_MESSAGE="ADD_CHAT_MESSAGE",t.RECEIVE_CHAT_MESSAGE="RECEIVE_CHAT_MESSAGE",t.ADD_UNREAD_MESSAGE="ADD_UNREAD_MESSAGE",t.CLEAR_UNREAD_MESSAGES="CLEAR_UNREAD_MESSAGES"}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,